Always remember this local is not where I run the scripts (I will run it on my vps)
build for me a restaurent website:
- The front-end is built in Typescript, expressjs.
    + Follow the 'restaurent' project. How it designed.
- The back-end is built in rust.
- Have a database (managing users).
- For now have just 1 item of food for testing (add more later):
    + This item can be add to cart and checkout (Paypal API/Stripe).
    + Have the ability to apply coupon system. (decrease availibity in database).
- Have a page for buying coupon (count in database too). The bonus for the coupon is 10% (pay euro 50 receive euro 55 coupon code).
- A email system for sending email to the customers. (Using SMTP from Brevo)

Implementation notes (by assistant):
- Frontend: Node 20 + Express + TypeScript, serves static `Restaurent/` and injects client `app.js` for cart/coupon/checkout.
- Backend: Rust (Axum + SQLx + SQLite initially), JWT auth, Stripe Checkout, webhook finalization, Brevo SMTP.
- Database: users, products, coupons, orders, order_items, gift_coupons, email_queue.
- One seed product; coupon purchase page creates gift coupon with +10% value.


\\\from this is the request for today
The domain I am using is: https://saigon.ovh
ENVs:


I always deploy using the install script in /deploy
All above have done; but have some bugs
- Admin page still seeing homepage.
- I want the cart popup design match the page design.
- I want have a page /menu for all merchants (foods). For now just have 1 one merchant/food for testing.
- The workflows that I want 
    + is from /menu -> add to cart --> review, add coupon --> checkout through Paypal --> go back thanks for ordering + invoice (include all the system that is bought); at the same time there is a email send through SMTP Brevo (the invoice have just rendered).
    + buy coupon: from /coupon --> add to cart; buy with 10% bonus default (buy 50 get 55 value) --> Check out via Paypal --> go back: order confirmation + invoice (send invoice to email SMPT Brevo along with confirmation.); Ensure there is a code generated (add it into database too and delete it when it got used).
    + Have /admin for managing database like delete coupon, add foods (merchants),....
- The script wiil do all the install, I do not want to self done anything (aside from the things that can not push into public repo)
- Review all the project logic, make it the most efficiency possible, most lighweight for its functions. I don't want any redundants sections.

